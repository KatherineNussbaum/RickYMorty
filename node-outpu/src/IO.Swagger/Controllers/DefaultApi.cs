/*
 * Rick And Morty API
 *
 * API para obtener información sobre personajes, ubicaciones y episodios de Rick y Morty.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: knussbaum@hogardecristo.cl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// Obtener todos los personajes
        /// </summary>
        /// <remarks>Obtiene una lista de todos los personajes de Rick y Morty</remarks>
        /// <param name="page">Número de página para paginación</param>
        /// <param name="name">Filtrar por el nombre dado</param>
        /// <param name="status">Filtrar por el estado dado (alive, dead o unknown)</param>
        /// <param name="species">Filtrar por la especie dada</param>
        /// <param name="type">Filtrar por el tipo dado</param>
        /// <param name="gender">Filtrar por el género dado (female, male, genderless o unknown)</param>
        /// <response code="200">Lista de personajes obtenida con éxito</response>
        /// <response code="400">Error en la solicitud</response>
        /// <response code="404">Personajes no encontrados</response>
        [HttpGet]
        [Route("/{tipo}/character")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CharacterGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Character), description: "Lista de personajes obtenida con éxito")]
        public virtual IActionResult CharacterGet([FromQuery]int? page, [FromQuery]string name, [FromQuery]string status, [FromQuery]string species, [FromQuery]string type, [FromQuery]string gender)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Character));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"image\" : \"http://example.com/aeiou\",\n  \"gender\" : \"gender\",\n  \"species\" : \"species\",\n  \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"origin\" : {\n    \"name\" : \"name\",\n    \"url\" : \"http://example.com/aeiou\"\n  },\n  \"name\" : \"name\",\n  \"location\" : {\n    \"created\" : \"created\",\n    \"name\" : \"name\",\n    \"residents\" : [ \"http://example.com/aeiou\", \"http://example.com/aeiou\" ],\n    \"id\" : 6,\n    \"type\" : \"type\",\n    \"dimension\" : \"dimension\",\n    \"url\" : \"http://example.com/aeiou\"\n  },\n  \"episode\" : [ \"http://example.com/aeiou\", \"http://example.com/aeiou\" ],\n  \"id\" : 0,\n  \"type\" : \"type\",\n  \"url\" : \"http://example.com/aeiou\",\n  \"status\" : \"status\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Character>(exampleJson)
                        : default(Character);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Obtener un solo personaje por su id
        /// </summary>
        /// <remarks>Obtiene un los datos de un personaje</remarks>
        /// <param name="id">Id del personaje</param>
        /// <response code="200">Personaje exitosamente encontrado</response>
        /// <response code="400">Error en la solicitud</response>
        /// <response code="404">Personaje no encontrado</response>
        [HttpGet]
        [Route("/{tipo}/character/{id}")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CharacterIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Character), description: "Personaje exitosamente encontrado")]
        public virtual IActionResult CharacterIdGet([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Character));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"image\" : \"http://example.com/aeiou\",\n  \"gender\" : \"gender\",\n  \"species\" : \"species\",\n  \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"origin\" : {\n    \"name\" : \"name\",\n    \"url\" : \"http://example.com/aeiou\"\n  },\n  \"name\" : \"name\",\n  \"location\" : {\n    \"created\" : \"created\",\n    \"name\" : \"name\",\n    \"residents\" : [ \"http://example.com/aeiou\", \"http://example.com/aeiou\" ],\n    \"id\" : 6,\n    \"type\" : \"type\",\n    \"dimension\" : \"dimension\",\n    \"url\" : \"http://example.com/aeiou\"\n  },\n  \"episode\" : [ \"http://example.com/aeiou\", \"http://example.com/aeiou\" ],\n  \"id\" : 0,\n  \"type\" : \"type\",\n  \"url\" : \"http://example.com/aeiou\",\n  \"status\" : \"status\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Character>(exampleJson)
                        : default(Character);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Obtener todas las localizaciones
        /// </summary>
        /// <remarks>Obtiene una lista de todas las localizaciones de la serie</remarks>
        /// <param name="name">nombre de la localizacion</param>
        /// <param name="type">Tipo de localizacion</param>
        /// <param name="dimesnion">Dimension de la localizacion</param>
        /// <response code="200">Lista de localizaciones obtenida con éxito</response>
        /// <response code="400">Error en la solicitud</response>
        /// <response code="404">Localizaciones no encontrados</response>
        [HttpGet]
        [Route("/{tipo}/location")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("LocationGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Location), description: "Lista de localizaciones obtenida con éxito")]
        public virtual IActionResult LocationGet([FromQuery]string name, [FromQuery]string type, [FromQuery]string dimesnion)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Location));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"created\" : \"created\",\n  \"name\" : \"name\",\n  \"residents\" : [ \"http://example.com/aeiou\", \"http://example.com/aeiou\" ],\n  \"id\" : 6,\n  \"type\" : \"type\",\n  \"dimension\" : \"dimension\",\n  \"url\" : \"http://example.com/aeiou\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Location>(exampleJson)
                        : default(Location);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
